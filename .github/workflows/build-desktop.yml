# This workflow will run in the context of the source of the PR.
# On a PR from a fork, the workflow will not have access to secrets, and so any parts of the build that require secrets will not run.
# If additional artifacts are needed, the failed "build-desktop-target.yml" workflow held up by the check-run should be re-run.

name: Build Desktop

on:
  pull_request:
    types: [opened, synchronize]
    branches-ignore:
      - 'l10n_master'
      - 'cf-pages'
    paths:
      - 'apps/desktop/**'
      - 'libs/**'
      - '*'
      - '!*.md'
      - '!*.txt'
      - '.github/workflows/build-desktop.yml'
  push:
    branches:
      - 'main'
      - 'rc'
      - 'hotfix-rc-desktop'
    paths:
      - 'apps/desktop/**'
      - 'libs/**'
      - '*'
      - '!*.md'
      - '!*.txt'
      - '.github/workflows/build-desktop.yml'
  workflow_call:
    inputs: {}
  workflow_dispatch:
    inputs:
      sdk_branch:
        description: "Custom SDK branch"
        required: false
        type: string
      testflight_distribute:
        description: "Force distribute to TestFlight regardless of branch (useful for QA testing on feature branches)"
        type: boolean
        default: true

defaults:
  run:
    shell: bash

jobs:
  electron-verify:
    name: Verify Electron Version
    runs-on: ubuntu-22.04
    steps:
      - name: Check out repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{  github.event.pull_request.head.sha }}

      - name: Verify
        run: |
          PACKAGE_VERSION=$(jq -r .devDependencies.electron package.json)
          ELECTRON_BUILDER_VERSION=$(jq -r .electronVersion ./apps/desktop/electron-builder.json)

          if [[ "$PACKAGE_VERSION" == "$ELECTRON_BUILDER_VERSION"  ]]; then
            echo "Versions matches"
          else
            echo "Version missmatch, package.json: $PACKAGE_VERSION, electron-builder.json: $ELECTRON_BUILDER_VERSION"
            exit 1
          fi

  setup:
    name: Setup
    runs-on: ubuntu-22.04
    outputs:
      package_version: ${{ steps.retrieve-version.outputs.package_version }}
      release_channel: ${{ steps.release-channel.outputs.channel }}
      build_number: ${{ steps.increment-version.outputs.build_number }}
      rc_branch_exists: ${{ steps.branch-check.outputs.rc_branch_exists }}
      hotfix_branch_exists: ${{ steps.branch-check.outputs.hotfix_branch_exists }}
      node_version: ${{ steps.retrieve-node-version.outputs.node_version }}
      has_secrets: ${{ steps.check-secrets.outputs.has_secrets }}
    defaults:
      run:
        working-directory: apps/desktop
    steps:
      - name: Check out repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{  github.event.pull_request.head.sha }}

      - name: Get Package Version
        id: retrieve-version
        run: |
          PKG_VERSION=$(jq -r .version src/package.json)
          echo "package_version=$PKG_VERSION" >> $GITHUB_OUTPUT

      - name: Increment Version
        id: increment-version
        run: |
          BUILD_NUMBER=$(expr 3000 + $GITHUB_RUN_NUMBER)
          echo "Setting build number to $BUILD_NUMBER"
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT

      - name: Get Version Channel
        id: release-channel
        run: |
          case "${{ steps.retrieve-version.outputs.package_version }}" in
            *"alpha"*)
              echo "channel=alpha" >> $GITHUB_OUTPUT
              echo "[!] We do not yet support 'alpha'"
              exit 1
              ;;
            *"beta"*)
              echo "channel=beta" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "channel=latest" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Check if special branches exist
        id: branch-check
        run: |
          if [[ $(git ls-remote --heads origin rc) ]]; then
            echo "rc_branch_exists=1" >> $GITHUB_OUTPUT
          else
            echo "rc_branch_exists=0" >> $GITHUB_OUTPUT
          fi

          if [[ $(git ls-remote --heads origin hotfix-rc-desktop) ]]; then
            echo "hotfix_branch_exists=1" >> $GITHUB_OUTPUT
          else
            echo "hotfix_branch_exists=0" >> $GITHUB_OUTPUT
          fi

      - name: Get Node Version
        id: retrieve-node-version
        working-directory: ./
        run: |
          NODE_NVMRC=$(cat .nvmrc)
          NODE_VERSION=${NODE_NVMRC/v/''}
          echo "node_version=$NODE_VERSION" >> $GITHUB_OUTPUT

  windows:
    name: Windows Build
    runs-on: windows-2022
    needs:
      - setup
    defaults:
      run:
        shell: pwsh
        working-directory: apps/desktop # Указываем рабочую директорию для всех шагов job'а
    env:
      _PACKAGE_VERSION: ${{ needs.setup.outputs.package_version }} # Версия из setup job
      _NODE_VERSION: ${{ needs.setup.outputs.node_version }}
      NODE_OPTIONS: --max_old_space_size=4096
    steps:
      - name: Check out repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          # При пуше используем SHA коммита, при PR - SHA из PR
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Set up Node
        uses: actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af # v4.1.0
        with:
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
          node-version: ${{ env._NODE_VERSION }}

      - name: Set up environment
        run: choco install checksum --no-progress

      - name: Rust
        shell: pwsh
        run: |
          rustup target install i686-pc-windows-msvc
          rustup target install aarch64-pc-windows-msvc

      - name: Print environment
        run: |
          node --version
          npm --version
          choco --version
          rustup show

      - name: Install Node dependencies
        run: npm ci
        working-directory: ./ # Устанавливаем зависимости в корне репозитория

      - name: Cache Native Module
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        id: cache
        with:
          path: |
            apps/desktop/desktop_native/napi/*.node
            apps/desktop/desktop_native/dist/*
          key: rust-${{ runner.os }}-${{ hashFiles('apps/desktop/desktop_native/**/*') }}

      - name: Build Native Module
        if: steps.cache.outputs.cache-hit != 'true'
        working-directory: apps/desktop/desktop_native # Возвращаемся в нужную директорию
        run: node build.js cross-platform

      - name: Build
        # working-directory: apps/desktop # Уже установлено в defaults для job'а
        run: npm run build

      - name: Pack & Sign (Custom Cert)
        # working-directory: apps/desktop # Уже установлено
        env:
          ELECTRON_BUILDER_SIGN: 1
          SIGNING_CERT_PATH: ${{ github.workspace }}/sign/BitwardenMOD.pfx
          WIN_CSC_KEY_PASSWORD: ${{ secrets.SIGNING_CERTIFICATE_PASSWORD }}
        run: |
          npm run pack:win

      # --- Существующие шаги загрузки артефактов (можно оставить или удалить) ---
      - name: Upload portable exe artifact
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          name: Bitwarden-Portable-${{ env._PACKAGE_VERSION }}.exe
          path: apps/desktop/dist/Bitwarden-Portable-${{ env._PACKAGE_VERSION }}.exe
          if-no-files-found: error

      - name: Upload installer exe artifact
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          name: Bitwarden-Installer-${{ env._PACKAGE_VERSION }}.exe
          path: apps/desktop/dist/nsis-web/Bitwarden-Installer-${{ env._PACKAGE_VERSION }}.exe
          if-no-files-found: error

      - name: Upload NSIS ia32 artifact
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          name: bitwarden-${{ env._PACKAGE_VERSION }}-ia32.nsis.7z
          path: apps/desktop/dist/nsis-web/bitwarden-${{ env._PACKAGE_VERSION }}-ia32.nsis.7z
          if-no-files-found: error

      - name: Upload NSIS x64 artifact
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          name: bitwarden-${{ env._PACKAGE_VERSION }}-x64.nsis.7z
          path: apps/desktop/dist/nsis-web/bitwarden-${{ env._PACKAGE_VERSION }}-x64.nsis.7z
          if-no-files-found: error

      - name: Upload NSIS ARM64 artifact
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          name: bitwarden-${{ env._PACKAGE_VERSION }}-arm64.nsis.7z
          path: apps/desktop/dist/nsis-web/bitwarden-${{ env._PACKAGE_VERSION }}-arm64.nsis.7z
          if-no-files-found: error

      - name: Upload auto-update artifact
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          name: ${{ needs.setup.outputs.release_channel }}.yml
          path: apps/desktop/dist/nsis-web/${{ needs.setup.outputs.release_channel }}.yml
          if-no-files-found: error

      # --- НОВЫЙ ШАГ: Обновление пре-релиза "Windows-CI-build" ---
      - name: Update 'Windows-CI-build' Pre-release
        # Выполняется только при push в main, чтобы не затрагивать PR и другие ветки
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/github-script@v6
        # Передаем нужные переменные в окружение скрипта
        env:
          PACKAGE_VERSION: ${{ env._PACKAGE_VERSION }}
          COMMIT_SHA: ${{ github.sha }} # Используем SHA текущего коммита
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            // Берем переменные из env шага
            const commit_sha = process.env.COMMIT_SHA;
            const packageVersion = process.env.PACKAGE_VERSION;

            if (!packageVersion || packageVersion === 'unknown') {
              core.setFailed("Package version could not be determined inside Build Desktop.");
              return;
            }
            if (!commit_sha) {
              core.setFailed("Commit SHA could not be determined.");
              return;
            }

            const targetReleaseName = 'Windows-CI-build';
            const expectedTagName = `continuous-${packageVersion}`; // Тег для этой версии

            // --- Пути к локальным файлам относительно working-directory job'а ('apps/desktop') ---
            const artifactsDistPath = 'apps/desktop/dist'; // Путь к основной папке dist внутри apps/desktop
            const nsisWebPath = path.join(artifactsDistPath, 'nsis-web'); // Путь к nsis-web внутри dist

            console.log(`Package Version: ${packageVersion}`);
            console.log(`Commit SHA: ${commit_sha}`);
            console.log(`Target Release Name: ${targetReleaseName}`);
            console.log(`Expected Tag Name: ${expectedTagName}`);
            console.log(`Looking for local files in: ${path.resolve(artifactsDistPath)} and ${path.resolve(nsisWebPath)}`);


            // Список локальных файлов для загрузки в релиз
            const filesToUpload = [
              { name: `Bitwarden-Portable-${packageVersion}.exe`, localPath: path.join(artifactsDistPath, `Bitwarden-Portable-${packageVersion}.exe`) },
              { name: `Bitwarden-Installer-${packageVersion}.exe`, localPath: path.join(nsisWebPath, `Bitwarden-Installer-${packageVersion}.exe`) },
              { name: `bitwarden-${packageVersion}-ia32.nsis.7z`, localPath: path.join(nsisWebPath, `bitwarden-${packageVersion}-ia32.nsis.7z`) },
              { name: `bitwarden-${packageVersion}-x64.nsis.7z`, localPath: path.join(nsisWebPath, `bitwarden-${packageVersion}-x64.nsis.7z`) },
              { name: `bitwarden-${packageVersion}-arm64.nsis.7z`, localPath: path.join(nsisWebPath, `bitwarden-${packageVersion}-arm64.nsis.7z`) },
              // Добавьте YML файл автообновления, если он нужен в релизе
              // { name: `${process.env.RELEASE_CHANNEL || 'latest'}.yml`, localPath: path.join(nsisWebPath, `${process.env.RELEASE_CHANNEL || 'latest'}.yml`) },
            ].filter(a => {
              const exists = fs.existsSync(a.localPath);
              if (!exists) console.log(`Local file not found: ${a.localPath}`);
              return exists;
            }); // Берем только существующие локальные файлы

            if (filesToUpload.length === 0) {
              core.warning("Не найдены локальные файлы для загрузки в релиз.");
              return; // Ничего не делаем, если файлов нет
            }
            console.log("Локальные файлы для загрузки в релиз:", filesToUpload.map(a => a.name));

            // Функция для загрузки ассета из ЛОКАЛЬНОГО файла
            async function uploadAsset(releaseId, filePath, assetName) {
              console.log(`Чтение локального файла: ${filePath}`);
              const fileContent = fs.readFileSync(filePath); // Читаем с диска
              const fileSize = fs.statSync(filePath).size;
              console.log(`Загрузка ассета: ${assetName} (${fileSize} bytes) в релиз ID: ${releaseId}`);
              try {
                await github.rest.repos.uploadReleaseAsset({
                  owner, repo, release_id: releaseId, name: assetName, data: fileContent,
                  headers: { 'Content-Type': 'application/octet-stream', 'Content-Length': fileSize },
                });
                console.log(`Ассет ${assetName} успешно загружен.`);
              } catch (error) {
                 console.error(`Не удалось загрузить ассет ${assetName}: ${error.status} ${error.message}`);
                 if (error.response) { console.error('Response data:', error.response.data); }
                 if (error.message.includes('already_exists')) { console.log(`Ассет ${assetName} уже существует. Пропускается.`); }
                 else { throw error; } // Пробрасываем другие ошибки
              }
            }

            // --- Логика поиска/создания/обновления релиза ---
            let release;
            console.log(`Поиск пре-релиза с именем: "${targetReleaseName}"`);
            const releases = await github.rest.repos.listReleases({ owner, repo });
            release = releases.data.find(r => r.prerelease && r.name === targetReleaseName);

            let releaseId;

            if (release) {
              // --- РЕЛИЗ НАЙДЕН - ОБНОВЛЯЕМ ---
              releaseId = release.id;
              console.log(`Найден существующий пре-релиз "${targetReleaseName}" с ID: ${releaseId}`);
              const currentTag = release.tag_name;

              // 1. Обновляем информацию о релизе (тег, коммит, описание)
              console.log(`Обновление информации релиза ID: ${releaseId}`);
              console.log(` - Целевой коммит: ${commit_sha}`);
              console.log(` - Целевой тег: ${expectedTagName} (Текущий тег: ${currentTag})`);
              try {
                await github.rest.repos.updateRelease({
                  owner, repo, release_id: releaseId,
                  tag_name: expectedTagName, // Устанавливаем тег для ЭТОЙ версии
                  target_commitish: commit_sha, // Указываем коммит для ЭТОЙ версии
                  name: targetReleaseName, // Имя оставляем тем же
                  body: `Автоматически обновленный пре-релиз (CI).\nКоммит: ${commit_sha.slice(0,7)}\nВерсия: ${packageVersion}`,
                  prerelease: true
                });
                console.log("Информация о релизе обновлена.");
              } catch (updateError) {
                console.error(`Не удалось обновить релиз: ${updateError.status} ${updateError.message}`);
                if (updateError.response) { console.error('Response data:', updateError.response.data); }
                // Подумайте, нужно ли останавливать выполнение, если не удалось обновить релиз
              }

              // 2. Удаляем ВСЕ старые ассеты
              console.log("Получение списка существующих ассетов для удаления...");
              try {
                const { data: assets } = await github.rest.repos.listReleaseAssets({ owner, repo, release_id: releaseId });
                console.log(`Найдено ${assets.length} ассетов для удаления.`);
                for (const asset of assets) {
                  console.log(`Удаление старого ассета: ${asset.name} (ID: ${asset.id})`);
                  try {
                    await github.rest.repos.deleteReleaseAsset({ owner, repo, asset_id: asset.id });
                    console.log(`Ассет ${asset.name} удален.`);
                  } catch (deleteError) {
                    console.error(`Не удалось удалить ассет ${asset.name} (ID: ${asset.id}): ${deleteError.status} ${deleteError.message}`);
                  }
                }
                console.log("Удаление старых ассетов завершено.");
              } catch (listAssetsError) {
                 console.error(`Не удалось получить список ассетов для релиза ${releaseId}: ${listAssetsError.status} ${listAssetsError.message}`);
                 // Если не можем получить список, возможно, не стоит продолжать загрузку?
              }

            } else {
              // --- РЕЛИЗ НЕ НАЙДЕН - СОЗДАЕМ ---
              console.log(`Пре-релиз с именем "${targetReleaseName}" не найден. Создание нового...`);
              try {
                const newRelease = await github.rest.repos.createRelease({
                  owner, repo,
                  tag_name: expectedTagName, // Тег для новой версии
                  name: targetReleaseName, // Имя, которое искали
                  body: `Автоматически созданный пре-релиз (CI).\nКоммит: ${commit_sha.slice(0,7)}\nВерсия: ${packageVersion}`,
                  prerelease: true,
                  target_commitish: commit_sha,
                });
                releaseId = newRelease.data.id;
                console.log(`Создан новый пре-релиз с ID: ${releaseId}`);
              } catch (createError) {
                  console.error(`Не удалось создать релиз: ${createError.status} ${createError.message}`);
                  if (createError.response) { console.error('Response data:', createError.response.data); }
                  core.setFailed("Не удалось создать пре-релиз."); // Останавливаемся, если не смогли создать
                  return;
              }
            }

            // --- Загрузка НОВЫХ ассетов из ЛОКАЛЬНЫХ ФАЙЛОВ ---
            if (releaseId) { // Загружаем, только если есть ID релиза
              console.log(`Загрузка ${filesToUpload.length} новых ассетов в релиз ID: ${releaseId}...`);
              for (const file of filesToUpload) {
                 await uploadAsset(releaseId, file.localPath, file.name); // Используем localPath
              }
              console.log("Загрузка новых ассетов успешно завершена.");
            } else {
              core.warning("Не удалось определить ID релиза, загрузка ассетов пропущена.");
            }

  check-failures:
    name: Check for failures
    if: always()
    runs-on: ubuntu-22.04
    needs:
      - electron-verify
      - setup
      - windows
    steps:
      - name: Check if any job failed
        if: |
          github.event_name != 'pull_request_target'
          && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/rc' || github.ref == 'refs/heads/hotfix-rc-desktop')
          && contains(needs.*.result, 'failure')
        run: exit 1
