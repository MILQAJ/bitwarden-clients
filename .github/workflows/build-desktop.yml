# This workflow will run in the context of the source of the PR.
# On a PR from a fork, the workflow will not have access to secrets, and so any parts of the build that require secrets will not run.
# If additional artifacts are needed, the failed "build-desktop-target.yml" workflow held up by the check-run should be re-run.

name: Build Desktop

on:
  pull_request:
    types: [opened, synchronize]
    branches-ignore:
      - 'l10n_master'
      - 'cf-pages'
    paths:
      - 'apps/desktop/**'
      - 'libs/**'
      - '*'
      - '!*.md'
      - '!*.txt'
      - '.github/workflows/build-desktop.yml'
  push:
    branches:
      - 'main'
      - 'rc'
      - 'hotfix-rc-desktop'
    paths:
      - 'apps/desktop/**'
      - 'libs/**'
      - '*'
      - '!*.md'
      - '!*.txt'
      - '.github/workflows/build-desktop.yml'
  workflow_call:
    inputs: {}
  workflow_dispatch:
    inputs:
      sdk_branch:
        description: "Custom SDK branch"
        required: false
        type: string
      testflight_distribute:
        description: "Force distribute to TestFlight regardless of branch (useful for QA testing on feature branches)"
        type: boolean
        default: true

defaults:
  run:
    shell: bash

jobs:
  electron-verify:
    name: Verify Electron Version
    runs-on: ubuntu-22.04
    steps:
      - name: Check out repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{  github.event.pull_request.head.sha }}

      - name: Verify
        run: |
          PACKAGE_VERSION=$(jq -r .devDependencies.electron package.json)
          ELECTRON_BUILDER_VERSION=$(jq -r .electronVersion ./apps/desktop/electron-builder.json)

          if [[ "$PACKAGE_VERSION" == "$ELECTRON_BUILDER_VERSION"  ]]; then
            echo "Versions matches"
          else
            echo "Version missmatch, package.json: $PACKAGE_VERSION, electron-builder.json: $ELECTRON_BUILDER_VERSION"
            exit 1
          fi

  setup:
    name: Setup
    runs-on: ubuntu-22.04
    outputs:
      package_version: ${{ steps.retrieve-version.outputs.package_version }}
      release_channel: ${{ steps.release-channel.outputs.channel }}
      build_number: ${{ steps.increment-version.outputs.build_number }}
      rc_branch_exists: ${{ steps.branch-check.outputs.rc_branch_exists }}
      hotfix_branch_exists: ${{ steps.branch-check.outputs.hotfix_branch_exists }}
      node_version: ${{ steps.retrieve-node-version.outputs.node_version }}
      has_secrets: ${{ steps.check-secrets.outputs.has_secrets }}
    defaults:
      run:
        working-directory: apps/desktop
    steps:
      - name: Check out repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{  github.event.pull_request.head.sha }}

      - name: Get Package Version
        id: retrieve-version
        run: |
          PKG_VERSION=$(jq -r .version src/package.json)
          echo "package_version=$PKG_VERSION" >> $GITHUB_OUTPUT

      - name: Increment Version
        id: increment-version
        run: |
          BUILD_NUMBER=$(expr 3000 + $GITHUB_RUN_NUMBER)
          echo "Setting build number to $BUILD_NUMBER"
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT

      - name: Get Version Channel
        id: release-channel
        run: |
          case "${{ steps.retrieve-version.outputs.package_version }}" in
            *"alpha"*)
              echo "channel=alpha" >> $GITHUB_OUTPUT
              echo "[!] We do not yet support 'alpha'"
              exit 1
              ;;
            *"beta"*)
              echo "channel=beta" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "channel=latest" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Check if special branches exist
        id: branch-check
        run: |
          if [[ $(git ls-remote --heads origin rc) ]]; then
            echo "rc_branch_exists=1" >> $GITHUB_OUTPUT
          else
            echo "rc_branch_exists=0" >> $GITHUB_OUTPUT
          fi

          if [[ $(git ls-remote --heads origin hotfix-rc-desktop) ]]; then
            echo "hotfix_branch_exists=1" >> $GITHUB_OUTPUT
          else
            echo "hotfix_branch_exists=0" >> $GITHUB_OUTPUT
          fi

      - name: Get Node Version
        id: retrieve-node-version
        working-directory: ./
        run: |
          NODE_NVMRC=$(cat .nvmrc)
          NODE_VERSION=${NODE_NVMRC/v/''}
          echo "node_version=$NODE_VERSION" >> $GITHUB_OUTPUT

      - name: Check secrets
        id: check-secrets
        env:
          AZURE_KV_CI_SERVICE_PRINCIPAL: ${{ secrets.AZURE_KV_CI_SERVICE_PRINCIPAL }}
        run: |
          has_secrets=${{ secrets.AZURE_KV_CI_SERVICE_PRINCIPAL != '' }}
          echo "has_secrets=$has_secrets" >> $GITHUB_OUTPUT

  windows:
    name: Windows Build
    runs-on: windows-2022
    needs:
      - setup
    defaults:
      run:
        shell: pwsh
        working-directory: apps/desktop
    env:
      _PACKAGE_VERSION: ${{ needs.setup.outputs.package_version }}
      _NODE_VERSION: ${{ needs.setup.outputs.node_version }}
      NODE_OPTIONS: --max_old_space_size=4096
    steps:
      - name: Check out repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Set up Node
        uses: actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af # v4.1.0
        with:
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
          node-version: ${{ env._NODE_VERSION }}

      - name: Install AST
        run: dotnet tool install --global AzureSignTool --version 4.0.1

      - name: Set up environmentF
        run: choco install checksum --no-progress

      - name: Rust
        shell: pwsh
        run: |
          rustup target install i686-pc-windows-msvc
          rustup target install aarch64-pc-windows-msvc

      - name: Print environment
        run: |
          node --version
          npm --version
          choco --version
          rustup show

      - name: Install Node dependencies
        run: npm ci
        working-directory: ./

      - name: Cache Native Module
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        id: cache
        with:
          path: |
            apps/desktop/desktop_native/napi/*.node
            apps/desktop/desktop_native/dist/*
          key: rust-${{ runner.os }}-${{ hashFiles('apps/desktop/desktop_native/**/*') }}

      - name: Build Native Module
        if: steps.cache.outputs.cache-hit != 'true'
        working-directory: apps/desktop/desktop_native
        run: node build.js cross-platform

      - name: Build
        run: npm run build

      - name: Pack & Sign (Custom Cert)
        env:
          ELECTRON_BUILDER_SIGN: 1
          SIGNING_CERT_PATH: ${{ github.workspace }}/sign/BitwardenMOD.pfx
          SIGNING_CERT_PASSWORD: ${{ secrets.SIGNING_CERTIFICATE_PASSWORD }}
        run: |
          npm run pack:win

      - name: Upload portable exe artifact
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          name: Bitwarden-Portable-${{ env._PACKAGE_VERSION }}.exe
          path: apps/desktop/dist/Bitwarden-Portable-${{ env._PACKAGE_VERSION }}.exe
          if-no-files-found: error

      - name: Upload installer exe artifact
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          name: Bitwarden-Installer-${{ env._PACKAGE_VERSION }}.exe
          path: apps/desktop/dist/nsis-web/Bitwarden-Installer-${{ env._PACKAGE_VERSION }}.exe
          if-no-files-found: error

      - name: Upload NSIS ia32 artifact
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          name: bitwarden-${{ env._PACKAGE_VERSION }}-ia32.nsis.7z
          path: apps/desktop/dist/nsis-web/bitwarden-${{ env._PACKAGE_VERSION }}-ia32.nsis.7z
          if-no-files-found: error

      - name: Upload NSIS x64 artifact
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          name: bitwarden-${{ env._PACKAGE_VERSION }}-x64.nsis.7z
          path: apps/desktop/dist/nsis-web/bitwarden-${{ env._PACKAGE_VERSION }}-x64.nsis.7z
          if-no-files-found: error

      - name: Upload NSIS ARM64 artifact
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          name: bitwarden-${{ env._PACKAGE_VERSION }}-arm64.nsis.7z
          path: apps/desktop/dist/nsis-web/bitwarden-${{ env._PACKAGE_VERSION }}-arm64.nsis.7z
          if-no-files-found: error

      - name: Upload auto-update artifact
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          name: ${{ needs.setup.outputs.release_channel }}.yml
          path: apps/desktop/dist/nsis-web/${{ needs.setup.outputs.release_channel }}.yml
          if-no-files-found: error

      - name: Create or update pre-release (main branch)
        if: github.ref == 'refs/heads/main'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
                    const github = require('@actions/github');
                    const fs = require('fs');
                    const path = require('path');

                    const owner = context.repo.owner;
                    const repo = context.repo.repo;
                    const commit_sha = context.sha;
                    const preReleaseName = 'Windows-CI-build';

                    // Массив с информацией об артефактах для загрузки
                    const artifactsToUpload = [
                      { name: 'Bitwarden-Portable-${{ env._PACKAGE_VERSION }}.exe', path: 'apps/desktop/dist/Bitwarden-Portable-${{ env._PACKAGE_VERSION }}.exe' },
                      { name: 'Bitwarden-Installer-${{ env._PACKAGE_VERSION }}.exe', path: 'apps/desktop/dist/nsis-web/Bitwarden-Installer-${{ env._PACKAGE_VERSION }}.exe' },
                      { name: 'bitwarden-${{ env._PACKAGE_VERSION }}-ia32.nsis.7z', path: 'apps/desktop/dist/nsis-web/bitwarden-${{ env._PACKAGE_VERSION }}-ia32.nsis.7z' },
                      { name: 'bitwarden-${{ env._PACKAGE_VERSION }}-x64.nsis.7z', path: 'apps/desktop/dist/nsis-web/bitwarden-${{ env._PACKAGE_VERSION }}-x64.nsis.7z' },
                      { name: 'bitwarden-${{ env._PACKAGE_VERSION }}-arm64.nsis.7z', path: 'apps/desktop/dist/nsis-web/bitwarden-${{ env._PACKAGE_VERSION }}-arm64.nsis.7z' },
                    ];

                    // Функция для загрузки ассета
                    async function uploadAsset(releaseId, artifact) {
                      const filePath = artifact.path;
                      const filename = artifact.name;

                      try {
                        const fileContent = fs.readFileSync(filePath);
                        const fileSize = fs.statSync(filePath).size;

                        console.log(`Загрузка файла: ${filename} (${fileSize} bytes)`);
                        await github.rest.repos.uploadReleaseAsset({
                          owner,
                          repo,
                          release_id: releaseId,
                          name: filename,
                          data: fileContent,
                          headers: {
                            'Content-Type': 'application/octet-stream',
                            'Content-Length': fileSize,
                          },
                        });
                        console.log(`Файл ${filename} успешно загружен.`);
                      } catch (error) {
                        console.error(`Ошибка при чтении или загрузке файла ${filename}:`, error);
                      }
                    }

                    // Поиск существующего пре-релиза
                    const releases = await github.rest.repos.listReleases({ owner, repo });
                    const preRelease = releases.data.find(release => release.prerelease && release.name === preReleaseName);

                    if (preRelease) {
                      const releaseId = preRelease.id;
                      console.log(`Найден существующий пре-релиз с ID: ${releaseId}`);

                      // Получение существующих ассетов релиза
                      const assets = await github.rest.repos.listReleaseAssets({ owner, repo, release_id });

                      // Удаление старых ассетов
                      for (const asset of assets.data) {
                        console.log(`Удаление старого ассета: ${asset.name} (ID: ${asset.id})`);
                        await github.rest.repos.deleteReleaseAsset({ owner, repo, asset_id: asset.id });
                        console.log(`Ассет ${asset.name} удален.`);
                      }

                      // Загрузка новых ассетов
                      for (const artifact of artifactsToUpload) {
                        await uploadAsset(releaseId, artifact);
                      }
                    } else {
                      // Создание нового пре-релиза, если он не существует
                      const newRelease = await github.rest.repos.createRelease({
                        owner,
                        repo,
                        tag_name: `pre-release-${commit_sha.slice(0, 7)}`, // Используем часть SHA коммита
                        name: preReleaseName,
                        body: 'Автоматически созданный пре-релиз.',
                        prerelease: true,
                        target_commitish: commit_sha,
                      });
                      const releaseId = newRelease.data.id;
                      console.log(`Создан новый пре-релиз с ID: ${releaseId}`);

                      // Загрузка ассетов в новый пре-релиз
                      for (const artifact of artifactsToUpload) {
                        await uploadAsset(releaseId, artifact);
                      }
                    }

  browser-build:
    name: Browser Build
    needs: setup
    if: ${{ needs.setup.outputs.has_secrets == 'true' }}
    uses: ./.github/workflows/build-browser.yml
    secrets: inherit

  check-failures:
    name: Check for failures
    if: always()
    runs-on: ubuntu-22.04
    needs:
      - electron-verify
      - browser-build
      - setup
      - windows
    steps:
      - name: Check if any job failed
        if: |
          github.event_name != 'pull_request_target'
          && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/rc' || github.ref == 'refs/heads/hotfix-rc-desktop')
          && contains(needs.*.result, 'failure')
        run: exit 1

      - name: Retrieve secrets
        id: retrieve-secrets
        if: failure()
        uses: bitwarden/gh-actions/get-keyvault-secrets@main
        with:
          keyvault: "bitwarden-ci"
          secrets: "devops-alerts-slack-webhook-url"
