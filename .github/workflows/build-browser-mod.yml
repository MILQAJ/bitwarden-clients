# This workflow will run in the context of the source of the PR.
# On a PR from a fork, the workflow will not have access to secrets, and so any parts of the build that require secrets will not run.
# If additional artifacts are needed, the failed "build-browser-target.yml" workflow held up by the check-run should be re-run.

name: Build Browser

on:
  pull_request:
    types: [opened, synchronize]
    branches-ignore:
      - 'l10n_master'
      - 'cf-pages'
    paths:
      - 'apps/browser/**'
      - 'libs/**'
      - '*'
      - '!*.md'
      - '!*.txt'
  push:
    branches:
      - 'main'
      - 'rc'
      - 'hotfix-rc-browser'
    paths:
      - 'apps/browser/**'
      - 'libs/**'
      - '*'
      - '!*.md'
      - '!*.txt'
      - '.github/workflows/build-browser-mod.yml'
  workflow_call:
    inputs: {}
  workflow_dispatch:
    inputs:
      sdk_branch:
        description: "Custom SDK branch"
        required: false
        type: string
  workflow_run:
    # Укажите точное имя workflow синхронизации (из поля 'name:' в sync-upstream.yml)
    # ИЛИ имя файла (sync-upstream.yml)
    workflows: ["Sync Fork with Upstream"] # <--- !!! ЗАМЕНИТЕ НА ВАШЕ ИМЯ WORKFLOW СИНХРОНИЗАЦИИ !!!
    types:
      - completed

defaults:
  run:
    shell: bash

jobs:
  setup:
    name: Setup
    if: >
      github.event_name == 'pull_request' ||
      github.event_name == 'workflow_call' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/rc' || github.ref == 'refs/heads/hotfix-rc-desktop')) ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.name == 'Sync Fork with Upstream' && github.event.workflow_run.conclusion == 'success')
    runs-on: ubuntu-22.04
    outputs:
      repo_url: ${{ steps.gen_vars.outputs.repo_url }}
      adj_build_number: ${{ steps.gen_vars.outputs.adj_build_number }}
      node_version: ${{ steps.retrieve-node-version.outputs.node_version }}
      has_secrets: ${{ steps.check-secrets.outputs.has_secrets }}
    steps:
      - name: Check out repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{  github.event.pull_request.head.sha }}

      - name: Get Package Version
        id: gen_vars
        run: |
          repo_url=https://github.com/$GITHUB_REPOSITORY.git
          adj_build_num=${GITHUB_SHA:0:7}

          echo "repo_url=$repo_url" >> $GITHUB_OUTPUT
          echo "adj_build_number=$adj_build_num" >> $GITHUB_OUTPUT

      - name: Get Node Version
        id: retrieve-node-version
        working-directory: ./
        run: |
          NODE_NVMRC=$(cat .nvmrc)
          NODE_VERSION=${NODE_NVMRC/v/''}
          echo "node_version=$NODE_VERSION" >> $GITHUB_OUTPUT

      - name: Check secrets
        id: check-secrets
        env:
          AZURE_KV_CI_SERVICE_PRINCIPAL: ${{ secrets.AZURE_KV_CI_SERVICE_PRINCIPAL }}
        run: |
          has_secrets=${{ secrets.AZURE_KV_CI_SERVICE_PRINCIPAL != '' }}
          echo "has_secrets=$has_secrets" >> $GITHUB_OUTPUT

      - name: Delete previous skipped runs of this workflow
        # Используем то же условие if, что и для основного job'а, чтобы шаг не выполнялся лишний раз
        if: >
          github.event_name == 'pull_request' ||
          github.event_name == 'workflow_call' ||
          github.event_name == 'workflow_dispatch' ||
          (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/rc' || github.ref == 'refs/heads/hotfix-rc-desktop')) || # Адаптируйте ветки при необходимости
          (github.event_name == 'workflow_run' && github.event.workflow_run.name == 'Sync Fork with Upstream' && github.event.workflow_run.conclusion == 'success') # Адаптируйте имя workflow синхронизации
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            // --- !!! ВАЖНО: Укажите ИМЯ ФАЙЛА ТЕКУЩЕГО WORKFLOW !!! ---
            // Для build-desktop-mod.yml:
            const workflowFileName = 'build-browser-mod.yml';
            // А для build-browser-mod.yml здесь должно быть:
            // const workflowFileName = 'build-browser-mod.yml';
            // ---------------------------------------------------------
            const currentRunId = context.runId;

            if (!workflowFileName) {
              core.warning("Имя файла workflow не установлено в скрипте!"); return;
            }

            console.log(`Ищем пропущенные ('skipped') запуски workflow '${workflowFileName}' в ${owner}/${repo}`);
            console.log(`Текущий ID запуска (не будет удален): ${currentRunId}`);

            try {
              // Получаем список пропущенных запусков для ЭТОГО workflow
              const runs = await github.paginate(github.rest.actions.listWorkflowRuns, {
                owner,
                repo,
                workflow_id: workflowFileName,
                status: 'skipped', // <--- ИЩЕМ ПРОПУЩЕННЫЕ
                per_page: 50,
              });

              if (!runs || runs.length === 0) {
                console.log("Не найдено старых пропущенных запусков для удаления.");
                return;
              }

              console.log(`Найдено ${runs.length} пропущенных запусков.`);

              // Фильтруем, чтобы случайно не удалить текущий запуск (хотя он не будет skipped на этом этапе)
              const runsToDelete = runs.filter(run => run.id !== currentRunId);

              if (runsToDelete.length === 0) {
                  console.log("Нет старых пропущенных запусков для удаления.");
                  return;
              }

              console.log(`Будет удалено ${runsToDelete.length} старых пропущенных запусков...`);

              // Удаляем каждый найденный пропущенный запуск
              for (const run of runsToDelete) {
                console.log(`Удаление запуска ID: ${run.id}, Status: ${run.status} (Создан: ${run.created_at})`);
                try {
                  await github.rest.actions.deleteWorkflowRun({
                    owner, repo, run_id: run.id,
                  });
                  console.log(` -> Запуск ${run.id} успешно удален.`);
                  await new Promise(resolve => setTimeout(resolve, 500)); // Пауза
                } catch (deleteError) {
                  core.warning(` -> Не удалось удалить запуск ${run.id}: ${deleteError.message}`);
                }
              }
              console.log("Очистка старых пропущенных запусков завершена.");

            } catch (error) {
              core.warning(`Ошибка при получении или удалении запусков workflow: ${error.message}`);
            }


  locales-test:
    name: Locales Test
    if: >
      github.event_name == 'pull_request' ||
      github.event_name == 'workflow_call' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/rc' || github.ref == 'refs/heads/hotfix-rc-desktop')) ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.name == 'Sync Fork with Upstream' && github.event.workflow_run.conclusion == 'success')
    runs-on: ubuntu-22.04
    needs:
      - setup
    defaults:
      run:
        working-directory: apps/browser
    steps:
      - name: Check out repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{  github.event.pull_request.head.sha }}

      - name: Testing locales - extName length
        run: |
         found_error=false

         echo "Locales Test"
         echo "============"
         echo "extName string must be 40 characters or less"
         echo
         for locale in $(ls src/_locales/); do
           string_length=$(jq '.extName.message | length' src/_locales/$locale/messages.json)
           if [[ $string_length -gt 40 ]]; then
             echo "$locale: $string_length"
             found_error=true
           fi
         done

         if $found_error; then
           echo
           echo "Please fix 'extName' for the locales listed above."
           exit 1
         else
           echo "Test passed!"
         fi


  build-source:
    name: Build browser source
    if: >
      github.event_name == 'pull_request' ||
      github.event_name == 'workflow_call' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/rc' || github.ref == 'refs/heads/hotfix-rc-desktop')) ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.name == 'Sync Fork with Upstream' && github.event.workflow_run.conclusion == 'success')
    runs-on: ubuntu-22.04
    needs:
      - setup
      - locales-test
    env:
      _BUILD_NUMBER: ${{ needs.setup.outputs.adj_build_number }}
      _NODE_VERSION: ${{ needs.setup.outputs.node_version }}
    steps:
      - name: Check out repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Set up Node
        uses: actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af # v4.1.0
        with:
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
          node-version: ${{ env._NODE_VERSION }}

      - name: Print environment
        run: |
          node --version
          npm --version

      - name: Build sources for reviewers
        run: |
          # Include hidden files in glob copy
          shopt -s dotglob

          # Remove ".git" directory
          rm -r .git

          # Copy root level files to source directory
          mkdir browser-source
          FILES=$(find . -maxdepth 1 -type f)
          for FILE in $FILES; do cp "$FILE" browser-source/; done

          # Copy patches to the Browser source directory
          mkdir -p browser-source/patches
          cp -r patches/* browser-source/patches

          # Copy apps/browser to the Browser source directory
          mkdir -p browser-source/apps/browser
          cp -r apps/browser/* browser-source/apps/browser

          # Copy libs to Browser source directory
          mkdir browser-source/libs
          cp -r libs/* browser-source/libs

          zip -r browser-source.zip browser-source

      - name: Upload browser source
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          name: browser-source-${{ env._BUILD_NUMBER }}.zip
          path: browser-source.zip
          if-no-files-found: error


  build:
    name: Build
    if: >
      github.event_name == 'pull_request' ||
      github.event_name == 'workflow_call' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/rc' || github.ref == 'refs/heads/hotfix-rc-desktop')) ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.name == 'Sync Fork with Upstream' && github.event.workflow_run.conclusion == 'success')
    runs-on: ubuntu-22.04
    needs:
      - setup
      - locales-test
      - build-source
    env:
      _BUILD_NUMBER: ${{ needs.setup.outputs.adj_build_number }}
      _NODE_VERSION: ${{ needs.setup.outputs.node_version }}
    strategy:
      matrix:
        include:
          - name: "chrome"
            npm_command: "dist:chrome"
            archive_name: "dist-chrome.zip"
            artifact_name: "dist-chrome-MV3"
          - name: "edge"
            npm_command: "dist:edge"
            archive_name: "dist-edge.zip"
            artifact_name: "dist-edge-MV3"
          - name: "firefox"
            npm_command: "dist:firefox"
            archive_name: "dist-firefox.zip"
            artifact_name: "dist-firefox"
          - name: "firefox-mv3"
            npm_command: "dist:firefox:mv3"
            archive_name: "dist-firefox.zip"
            artifact_name: "DO-NOT-USE-FOR-PROD-dist-firefox-MV3"
          - name: "opera-mv3"
            npm_command: "dist:opera:mv3"
            archive_name: "dist-opera.zip"
            artifact_name: "dist-opera-MV3"
    steps:
      - name: Check out repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{  github.event.pull_request.head.sha }}

      - name: Set up Node
        uses: actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af # v4.1.0
        with:
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
          node-version: ${{ env._NODE_VERSION }}

      - name: Print environment
        run: |
          node --version
          npm --version

      - name: Download browser source
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: browser-source-${{ env._BUILD_NUMBER }}.zip

      - name: Unzip browser source artifact
        run: |
          unzip browser-source.zip
          rm browser-source.zip

      - name: NPM setup
        run: npm ci
        working-directory: browser-source/

      - name: Download SDK artifacts
        if: ${{ inputs.sdk_branch != '' }}
        uses: bitwarden/gh-actions/download-artifacts@main
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: build-wasm-internal.yml
          workflow_conclusion: success
          branch: ${{ inputs.sdk_branch }}
          artifacts: sdk-internal
          repo: bitwarden/sdk-internal
          path: sdk-internal
          if_no_artifact_found: fail

      - name: Override SDK
        if: ${{ inputs.sdk_branch != '' }}
        working-directory: browser-source/
        run: npm link ../sdk-internal

      - name: Build extension
        run: npm run ${{ matrix.npm_command }}
        working-directory: browser-source/apps/browser

      - name: Upload extension artifact
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          name: ${{ matrix.artifact_name }}-${{ env._BUILD_NUMBER }}.zip
          path: browser-source/apps/browser/dist/${{ matrix.archive_name }}
          if-no-files-found: error

      # --- Начало вашего файла build-browser.yml ---
# (jobs: setup, locales-test, build-source, build)
# ... все предыдущие jobs остаются как есть ...

  # --- НОВЫЙ JOB: Обновление пре-релиза "browser-ci" ---
  update_browser_ci_release:
    name: Update Browser CI Pre-release
    runs-on: ubuntu-latest
    # Зависит от setup (для получения _BUILD_NUMBER) и build (чтобы все сборки завершились)
    needs: [setup, build]
    # Выполняется только при push в main (или измените условие)
    if: >
          (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
          (github.event_name == 'workflow_run' && github.event.workflow_run.name == 'Sync Fork with Upstream' && github.event.workflow_run.conclusion == 'success')
    permissions:
      actions: read    # Право на чтение артефактов
      contents: write  # Право на создание/обновление релиза
    steps:
      - name: Check out repo # Нужен для чтения manifest.json
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ github.sha }} # Используем коммит текущего push

      - name: Get Package Version from Manifest
        id: get_version
        run: |
          # Читаем версию из манифеста расширения
          PKG_VERSION=$(jq -r .version apps/browser/src/manifest.json)
          echo "package_version=$PKG_VERSION" >> $GITHUB_OUTPUT
          echo "Версия из манифеста: $PKG_VERSION"

      - name: Download All Browser Build Artifacts
        uses: actions/download-artifact@v4 # Скачиваем все артефакты job'а 'build'
        with:
          # Имя не указано - скачиваем все артефакты, созданные предыдущими jobs этого workflow run
          path: browser-source/apps/browser/dist/ # Скачиваем в папку browser-artifacts
        # Важно: Этот action скачает артефакты в подпапки, названные по имени артефакта!
        # Например: browser-artifacts/dist-chrome-MV3-abcdefg.zip/dist-chrome.zip

      - name: List Downloaded Artifacts Structure # Отладочный шаг
        run: |
          echo "Содержимое папки browser-artifacts:"
          ls -R browser-source/apps/browser/dist/

      - name: Move downloaded files to flat structure # Перемещаем файлы из подпапок
        id: prepare_files
        run: |
          mkdir -p ./release-assets
          shopt -s globstar # Включаем рекурсивный поиск по маске **
          found_files=0
          # Ищем все .zip файлы внутри browser-artifacts и копируем их в release-assets
          for file in browser-source/apps/browser/dist/**/*.zip; do
            if [ -f "$file" ]; then
              echo "Копирование файла: $file в ./release-assets/"
              cp "$file" ./release-assets/
              found_files=$((found_files + 1))
            fi
          done
          echo "Перемещено файлов: $found_files"
          echo "count=$found_files" >> $GITHUB_OUTPUT
        shell: bash

      - name: Update 'browser-ci' Pre-release
        # Выполняется, только если файлы были найдены и перемещены
        if: steps.prepare_files.outputs.count > 0
        uses: actions/github-script@v6
        env:
          # Передаем версию из шага get_version
          PACKAGE_VERSION: ${{ steps.get_version.outputs.package_version }}
          COMMIT_SHA: ${{ github.sha }}
          # Передаем Build Number (short SHA) из setup job
          BUILD_NUMBER: ${{ needs.setup.outputs.adj_build_number }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const commit_sha = process.env.COMMIT_SHA;
            const packageVersion = process.env.PACKAGE_VERSION; // Версия из manifest.json
            const buildNumber = process.env.BUILD_NUMBER; // Короткий SHA

            if (!packageVersion || packageVersion === 'unknown') {
               core.setFailed("Версия пакета (из манифеста) не определена."); return;
            }
            if (!commit_sha) { core.setFailed("Commit SHA не определен."); return; }
            if (!buildNumber) { core.setFailed("Build number (short SHA) не определен."); return; }

            const targetReleaseName = 'Browser-CI-build'; // Новое имя релиза
            // Используем версию из манифеста для тега
            const expectedTagName = `browser-ci`;
            const artifactsPath = 'release-assets'; // Папка с подготовленными файлами

            console.log(`Package Version: ${packageVersion}`);
            console.log(`Commit SHA: ${commit_sha}`);
            console.log(`Target Release Name: ${targetReleaseName}`);
            console.log(`Expected Tag Name: ${expectedTagName}`);
            console.log(`Build Number (Short SHA): ${buildNumber}`);
            console.log(`Looking for local files in: ${path.resolve(artifactsPath)}`);

            // Собираем список файлов из папки release-assets
            const filesToUpload = fs.readdirSync(artifactsPath)
              .filter(fileName => fileName.endsWith('.zip')) // Берем только zip архивы
              .map(fileName => ({
                name: fileName, // Имя ассета будет именем файла
                localPath: path.join(artifactsPath, fileName)
              }))
              .filter(a => fs.existsSync(a.localPath));

            if (filesToUpload.length === 0) {
              core.warning("Не найдены локальные zip файлы для загрузки в релиз в папке " + artifactsPath);
              return;
            }
            console.log("Локальные файлы для загрузки в релиз:", filesToUpload.map(a => a.name));

            // Функция для загрузки ассета (остается той же)
            async function uploadAsset(releaseId, filePath, assetName) {
              // ... (код функции uploadAsset без изменений) ...
              console.log(`Чтение локального файла: ${filePath}`);
              const fileContent = fs.readFileSync(filePath);
              const fileSize = fs.statSync(filePath).size;
              console.log(`Загрузка ассета: ${assetName} (${fileSize} bytes) в релиз ID: ${releaseId}`);
              try {
                await github.rest.repos.uploadReleaseAsset({
                  owner, repo, release_id: releaseId, name: assetName, data: fileContent,
                  headers: { 'Content-Type': 'application/zip', 'Content-Length': fileSize }, // Меняем Content-Type на application/zip
                });
                console.log(`Ассет ${assetName} успешно загружен.`);
              } catch (error) {
                 console.error(`Не удалось загрузить ассет ${assetName}: ${error.status} ${error.message}`);
                 if (error.response) { console.error('Response data:', error.response.data); }
                 if (error.message.includes('already_exists')) { console.log(`Ассет ${assetName} уже существует. Пропускается.`); }
                 else { throw error; }
              }
            }

            // --- Логика поиска/создания/обновления релиза (остается той же, меняется только имя и тег) ---
            let release;
            console.log(`Поиск пре-релиза с именем: "${targetReleaseName}"`);
            const releases = await github.rest.repos.listReleases({ owner, repo });
            release = releases.data.find(r => r.prerelease && r.name === targetReleaseName);

            let releaseId;
            const releaseBody = `Автоматически обновленный CI пре-релиз браузерного расширения.\nКоммит: ${commit_sha.slice(0,7)}\nВерсия: ${packageVersion}\nBuild: ${buildNumber}`;

            if (release) {
              // --- РЕЛИЗ НАЙДЕН - ОБНОВЛЯЕМ ---
              releaseId = release.id;
              console.log(`Найден существующий пре-релиз "${targetReleaseName}" с ID: ${releaseId}`);
              // 1. Обновляем информацию о релизе
              await github.rest.repos.updateRelease({
                  owner, repo, release_id: releaseId,
                  tag_name: expectedTagName, target_commitish: commit_sha, name: targetReleaseName,
                  body: releaseBody, prerelease: true
              });
              console.log("Информация о релизе обновлена.");
              // 2. Удаляем ВСЕ старые ассеты
              console.log("Удаление старых ассетов...");
              const { data: assets } = await github.rest.repos.listReleaseAssets({ owner, repo, release_id: releaseId });
              for (const asset of assets) {
                  // ... (логика удаления без изменений) ...
                  console.log(`Удаление старого ассета: ${asset.name} (ID: ${asset.id})`);
                  try { await github.rest.repos.deleteReleaseAsset({ owner, repo, asset_id: asset.id }); }
                  catch (deleteError) { console.error(`Не удалось удалить ассет ${asset.name}: ${deleteError.status} ${deleteError.message}`); }
              }
              console.log("Удаление старых ассетов завершено.");
            } else {
              // --- РЕЛИЗ НЕ НАЙДЕН - СОЗДАЕМ ---
              console.log(`Пре-релиз с именем "${targetReleaseName}" не найден. Создание нового...`);
              const newRelease = await github.rest.repos.createRelease({
                  owner, repo, tag_name: expectedTagName, name: targetReleaseName,
                  body: releaseBody, prerelease: true, target_commitish: commit_sha,
              });
              releaseId = newRelease.data.id;
              console.log(`Создан новый пре-релиз с ID: ${releaseId}`);
            }

            // --- Загрузка НОВЫХ ассетов ---
            if (releaseId) {
              console.log(`Загрузка ${filesToUpload.length} новых ассетов в релиз ID: ${releaseId}...`);
              for (const file of filesToUpload) {
                 await uploadAsset(releaseId, file.localPath, file.name);
              }
              console.log("Загрузка новых ассетов успешно завершена.");
            } else {
              core.warning("Не удалось определить ID релиза, загрузка ассетов пропущена.");
            }
