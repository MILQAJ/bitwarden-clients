name: Sync Fork with Upstream

on:
  schedule:
    - cron: '*/30 * * * *'
  workflow_dispatch: # Оставляем возможность ручного запуска
    inputs:
      branch_to_sync:
        description: 'Branch to sync (in your fork and upstream)'
        required: true
        default: 'main'

jobs:
  sync:
    name: Sync ${{ github.event.inputs.branch_to_sync || 'main' }} branch
    runs-on: ubuntu-latest
    # Даем права на запись в репозиторий (для git push)
    permissions:
      contents: write  # Оставляем для git push
      actions: write

    steps:
      # 1. Получаем код вашего форка
      - name: Checkout Fork
        uses: actions/checkout@v4 # Используйте актуальную версию
        with:
          ref: ${{ github.event.inputs.branch_to_sync || 'main' }} # Получаем нужную ветку
          # Используем токен для push обратно в репозиторий
          token: ${{ secrets.GITHUB_TOKEN }}
          # Получаем всю историю, чтобы избежать проблем при слиянии
          fetch-depth: 0

      - name: Delete previous skipped runs of build browser workflow
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            // --- !!! ВАЖНО: Укажите ИМЯ ФАЙЛА ТЕКУЩЕГО WORKFLOW !!! ---
            // Для build-desktop-mod.yml:
            const workflowFileName = 'build-browser-mod.yml';
            // А для build-browser-mod.yml здесь должно быть:
            // const workflowFileName = 'build-browser-mod.yml';
            // ---------------------------------------------------------
            const currentRunId = context.runId;

            if (!workflowFileName) {
              core.warning("Имя файла workflow не установлено в скрипте!"); return;
            }

            console.log(`Ищем пропущенные ('skipped') запуски workflow '${workflowFileName}' в ${owner}/${repo}`);
            console.log(`Текущий ID запуска (не будет удален): ${currentRunId}`);

            try {
              // Получаем список пропущенных запусков для ЭТОГО workflow
              const runs = await github.paginate(github.rest.actions.listWorkflowRuns, {
                owner,
                repo,
                workflow_id: workflowFileName,
                status: 'skipped', // <--- ИЩЕМ ПРОПУЩЕННЫЕ
                per_page: 50,
              });

              if (!runs || runs.length === 0) {
                console.log("Не найдено старых пропущенных запусков для удаления.");
                return;
              }

              console.log(`Найдено ${runs.length} пропущенных запусков.`);

              // Фильтруем, чтобы случайно не удалить текущий запуск (хотя он не будет skipped на этом этапе)
              const runsToDelete = runs.filter(run => run.id !== currentRunId);

              if (runsToDelete.length === 0) {
                  console.log("Нет старых пропущенных запусков для удаления.");
                  return;
              }

              console.log(`Будет удалено ${runsToDelete.length} старых пропущенных запусков...`);

              // Удаляем каждый найденный пропущенный запуск
              for (const run of runsToDelete) {
                console.log(`Удаление запуска ID: ${run.id}, Status: ${run.status} (Создан: ${run.created_at})`);
                try {
                  await github.rest.actions.deleteWorkflowRun({
                    owner, repo, run_id: run.id,
                  });
                  console.log(` -> Запуск ${run.id} успешно удален.`);
                  await new Promise(resolve => setTimeout(resolve, 500)); // Пауза
                } catch (deleteError) {
                  core.warning(` -> Не удалось удалить запуск ${run.id}: ${deleteError.message}`);
                }
              }
              console.log("Очистка старых пропущенных запусков завершена.");

            } catch (error) {
              core.warning(`Ошибка при получении или удалении запусков workflow: ${error.message}`);
            }

      - name: Delete previous skipped runs of build desktop workflow
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            // --- !!! ВАЖНО: Укажите ИМЯ ФАЙЛА ТЕКУЩЕГО WORKFLOW !!! ---
            // Для build-desktop-mod.yml:
            const workflowFileName = 'build-desktop-mod.yml';
            // А для build-browser-mod.yml здесь должно быть:
            // const workflowFileName = 'build-browser-mod.yml';
            // ---------------------------------------------------------
            const currentRunId = context.runId;

            if (!workflowFileName) {
              core.warning("Имя файла workflow не установлено в скрипте!"); return;
            }

            console.log(`Ищем пропущенные ('skipped') запуски workflow '${workflowFileName}' в ${owner}/${repo}`);
            console.log(`Текущий ID запуска (не будет удален): ${currentRunId}`);

            try {
              // Получаем список пропущенных запусков для ЭТОГО workflow
              const runs = await github.paginate(github.rest.actions.listWorkflowRuns, {
                owner,
                repo,
                workflow_id: workflowFileName,
                status: 'skipped', // <--- ИЩЕМ ПРОПУЩЕННЫЕ
                per_page: 50,
              });

              if (!runs || runs.length === 0) {
                console.log("Не найдено старых пропущенных запусков для удаления.");
                return;
              }

              console.log(`Найдено ${runs.length} пропущенных запусков.`);

              // Фильтруем, чтобы случайно не удалить текущий запуск (хотя он не будет skipped на этом этапе)
              const runsToDelete = runs.filter(run => run.id !== currentRunId);

              if (runsToDelete.length === 0) {
                  console.log("Нет старых пропущенных запусков для удаления.");
                  return;
              }

              console.log(`Будет удалено ${runsToDelete.length} старых пропущенных запусков...`);

              // Удаляем каждый найденный пропущенный запуск
              for (const run of runsToDelete) {
                console.log(`Удаление запуска ID: ${run.id}, Status: ${run.status} (Создан: ${run.created_at})`);
                try {
                  await github.rest.actions.deleteWorkflowRun({
                    owner, repo, run_id: run.id,
                  });
                  console.log(` -> Запуск ${run.id} успешно удален.`);
                  await new Promise(resolve => setTimeout(resolve, 500)); // Пауза
                } catch (deleteError) {
                  core.warning(` -> Не удалось удалить запуск ${run.id}: ${deleteError.message}`);
                }
              }
              console.log("Очистка старых пропущенных запусков завершена.");

            } catch (error) {
              core.warning(`Ошибка при получении или удалении запусков workflow: ${error.message}`);
            }
          
      - name: Delete previous failed runs
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            // --- Укажите ТОЧНОЕ имя файла вашего workflow ---
            const workflowFileName = 'sync-upstream.yml';
            const currentRunId = context.runId;

            console.log(`Ищем неудачные ('failure') запуски workflow '${workflowFileName}' в <span class="math-inline">\{owner\}/</span>{repo}`);
            console.log(`Текущий ID запуска (не будет удален): ${currentRunId}`);

            try {
              // Получаем список неудачных запусков для ЭТОГО workflow
              // Используем пагинацию для обработки >100 записей
              const runs = await github.paginate(github.rest.actions.listWorkflowRuns, {
                owner,
                repo,
                workflow_id: workflowFileName,
                status: 'failure',
                per_page: 50, // Можно настроить количество на страницу
              });

              if (!runs || runs.length === 0) {
                console.log("Не найдено старых неудачных запусков для удаления.");
                return;
              }

              console.log(`Найдено ${runs.length} неудачных запусков.`);

              // Фильтруем, чтобы случайно не удалить текущий запуск
              const runsToDelete = runs.filter(run => run.id !== currentRunId);

              if (runsToDelete.length === 0) {
                  console.log("Нет старых неудачных запусков для удаления.");
                  return;
              }

              console.log(`Будет удалено ${runsToDelete.length} старых неудачных запусков...`);

              // Удаляем каждый найденный неудачный запуск (кроме текущего)
              for (const run of runsToDelete) {
                console.log(`Удаление запуска ID: ${run.id}, Status: ${run.status}, Conclusion: ${run.conclusion} (Создан: ${run.created_at})`);
                try {
                  await github.rest.actions.deleteWorkflowRun({
                    owner,
                    repo,
                    run_id: run.id,
                  });
                  console.log(` -> Запуск ${run.id} успешно удален.`);
                  // Небольшая пауза между запросами к API
                  await new Promise(resolve => setTimeout(resolve, 500)); // 0.5 секунды
                } catch (deleteError) {
                  // Выводим предупреждение, но продолжаем удалять остальные
                  core.warning(` -> Не удалось удалить запуск ${run.id}: ${deleteError.message}`);
                }
              }
              console.log("Очистка старых неудачных запусков завершена.");

            } catch (error) {
              // Выводим предупреждение, если не удалось получить список или произошла другая ошибка
              core.warning(`Ошибка при получении или удалении запусков workflow: ${error.message}`);
            }

      # 2. Настраиваем Git (имя и email для коммитов слияния)
      - name: Set up Git config
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      # 3. Добавляем оригинальный репозиторий как remote "upstream"
      - name: Add upstream remote
        run: |
          # !!! ЗАМЕНИТЕ URL НА АДРЕС ОРИГИНАЛЬНОГО РЕПОЗИТОРИЯ !!!
          git remote add upstream https://github.com/bitwarden/clients.git # Пример для Bitwarden Clients

      # 4. Получаем изменения из upstream
      - name: Fetch upstream changes
        run: git fetch upstream

      - name: Check for new commits
        id: check_sync # ID шага для ссылки на output
        run: |
          BRANCH="${{ github.event.inputs.branch_to_sync || 'main' }}"
          echo "Checking branch: $BRANCH"

          LOCAL_SHA=$(git rev-parse HEAD)
          UPSTREAM_SHA=$(git rev-parse upstream/$BRANCH)
          echo "Local SHA: $LOCAL_SHA"
          echo "Upstream SHA: $UPSTREAM_SHA"

          # Считаем коммиты в upstream/$BRANCH, которых нет в локальной HEAD
          COMMIT_COUNT=$(git rev-list HEAD..upstream/$BRANCH --count)
          echo "Found $COMMIT_COUNT new commits in upstream/$BRANCH."

          # Устанавливаем output на основе КОЛИЧЕСТВА новых коммитов
          if [[ "$COMMIT_COUNT" -gt 0 ]]; then
            # Есть новые коммиты, нужно обновляться
            echo "is_up_to_date=false" >> $GITHUB_OUTPUT
          else
            # Новых коммитов нет (ветка синхронизирована или опережает)
            echo "Ветка $BRANCH уже синхронизирована или опережает upstream/$BRANCH."
            echo "is_up_to_date=true" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Fail workflow if no new commits found
        # Выполняем, ТОЛЬКО если is_up_to_date РАВНО true
        if: steps.check_sync.outputs.is_up_to_date == 'true'
        run: |
          echo "::warning::Нет новых коммитов для синхронизации. Завершаем workflow с ошибкой, чтобы не запускать последующие билды."
          exit 1 # Завершаем шаг (и весь job/workflow) с кодом ошибки > 0 = Failure

      # 5. Выполняем слияние ветки из upstream в вашу ветку
      - name: Merge upstream branch
      # Выполняем, только если is_up_to_date не true
        if: steps.check_sync.outputs.is_up_to_date != 'true'
        run: |
          git merge --no-edit upstream/${{ github.event.inputs.branch_to_sync || 'main' }}
          echo "Слияние выполнено."
        # Опция --no-edit используется, чтобы не открывать редактор для сообщения коммита слияния, если он понадобится

      # 6. Отправляем изменения (включая коммит слияния, если он был) обратно в ваш форк
      - name: Push changes to fork
      # Выполняем, только если is_up_to_date не true
        if: steps.check_sync.outputs.is_up_to_date != 'true'
        run: |
          git push origin ${{ github.event.inputs.branch_to_sync || 'main' }}
